# .cursorrules

Concise guidelines for the Cursor Composer "Agent Mode" in the "Cram" project. Links below point to more detailed rules:

References:  
• [@docs/prd.md](#) – Project Requirements Document  
• [@docs/AI Workflow Overview.md](#)  
• [@docs/nextjs-rules.md](#)  
• [@docs/Next Supabase Rules.md](#)  
• [@docs/Next.js Rules.md](#)  
• [@docs/Next.js Rules With Edge.md](#)  
• [@docs/Codebase Organization Rules.md](#)  
• Agent Core Rules (Notepad Context)

--------------------------------------------------------------------------------

## 1. Directory & Initialization
• Confirm you are in "cram-app" before every task.  
• Read .cursorrules and [@docs/prd.md](#).  
• Follow the steps in [@docs/AI Workflow Overview.md](#) (Task Initialization, Context Management, etc.).  
• Avoid unrelated changes unless explicitly requested.


--------------------------------------------------------------------------------

## 2. Workflow Outline
1. Task Initialization  
   – Clarify user goals, open/update session logs, define success criteria.  
2. Context Management  
   – Use list_dir, file_search, codebase_search, grep_search; request missing context.  
3. Execution & Coding  
   – Conform to guidelines from [@docs/nextjs-rules.md](#), [@docs/Next Supabase Rules.md](#), [@docs/Next.js Rules.md](#), [@docs/Next.js Rules With Edge.md](#), and [@docs/Codebase Organization Rules.md](#).  
   – Keep commits small, logical, descriptive.  
4. Verification  
   – Update session notes, tests, and relevant docs ([@docs/project-folder-structure.md](#), [@docs/api-routes.md](#)).  
5. Conclusion  
   – Summarize changes, confirm alignment with rule files, finalize tasks.

--------------------------------------------------------------------------------

## 3. Next.js & Supabase Essentials
• For data fetching, use server components in the Next.js 13 "app" directory; only "use client" when necessary.  
• Store secrets/keys server-side; RLS-protected data in Supabase.  
• Use edge functions minimally; prefer server actions for heavier logic.  
(See [@docs/Next Supabase Rules.md](#) and [@docs/Next.js Rules With Edge.md](#))

--------------------------------------------------------------------------------

## 4. Code Organization
• Keep domain logic centralized (e.g., "mega file" for ticket workflows).  
• Place shared types in /types or /app/lib/types.  
• Name files predictably: page.tsx, layout.tsx, route.ts, server-actions.ts.  
• IMPORTANT: Import Shadcn components and Tailwind instead of creating new ones. Only implement custom components using Radix if they don't exist in Shadcn UI.
• ALWAYS use the --legacy-peer-deps flag when installing packages with npm/npx.
• The project uses PowerShell as the default terminal.

(See [@docs/Codebase Organization Rules.md](#))
(See [@docs/ui-components.md](#))

--------------------------------------------------------------------------------

## 5. Security & Environment
• Use .env for sensitive data on the server; never expose secrets to the client.  
• Don't alter schemas unless specifically asked.  
(See [@docs/prd.md](#) and [@docs/AI Workflow Overview.md](#))

--------------------------------------------------------------------------------

## 6. Commits & Code Style
• Provide concise, descriptive commit messages; do not mix unrelated changes.  
• Write functional, type-safe TS: prefer iteration, pure functions, minimal braces.  
• Validate inputs on the server.  
(See [@docs/nextjs-rules.md](#), [@docs/Next.js Rules.md](#), [@docs/Next.js Rules With Edge.md](#))

--------------------------------------------------------------------------------

## 7. References & Enforcement
• Always check [@docs/prd.md](#) and [@docs/AI Workflow Overview.md](#) for final project requirements.  
• Escalate or clarify conflicts when necessary.  
• This .cursorrules plus the PRD have ultimate authority.
